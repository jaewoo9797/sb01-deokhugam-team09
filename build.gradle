plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'com.codeit'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }

}
springBoot {
    buildInfo()
}

jacoco {
    toolVersion = "0.8.10"
    reportsDirectory = layout.buildDirectory.dir('jacocoReport')
}

bootJar {
    archiveFileName = 'deokhugam.jar'
    archiveVersion = "${version}"

}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.retry:spring-retry'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Monitoring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    // AWS
    implementation platform("io.awspring.cloud:spring-cloud-aws-dependencies:3.3.0")
    implementation 'io.awspring.cloud:spring-cloud-aws-s3'
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-secrets-manager'
    implementation 'io.awspring.cloud:spring-cloud-aws-starter-parameter-store'

    // OCR
    implementation 'net.sourceforge.tess4j:tess4j:5.13.0'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'org.postgresql:postgresql'

    annotationProcessor 'org.projectlombok:lombok'

    implementation 'org.mapstruct:mapstruct:1.6.3'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.rest-assured:rest-assured:5.3.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport //테스트가 끝나고 Jacoco 리포트 작성
}

//jacoco 리포트 설정
jacocoTestReport {
    dependsOn test

    reports {
        xml.required = true
        html.required = true
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            //분석 리포트에서 제외할 클래스를 설정합니다.
                            '**/Q*.class',                        // QueryDSL Q클래스
                            '**/generated/**',                   // generated 패키지 제외
                            '**/mapper',              // 모든 mapper 패키지 제외
                    ])
                })
        )
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

//하위 queryDSL 관련 설정
def querydslDir = "build/generated/querydsl" //Q클래스 생성 위치

tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslDir)
    options.compilerArgs += ['-parameters']

}

clean {
    delete file(querydslDir)
}
